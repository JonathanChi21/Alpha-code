{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/cmpun/OneDrive/Documentos/alpha-code/src/components/lessons/LessonOne.tsx\";\nimport * as React from 'react';\nimport { AppBar, CardMedia, Container, GridList, Tab, Tabs, Typography } from '@material-ui/core';\nimport TabPanel from '../main-components/TabPanel';\nimport dataTypes from '../../img/data-types.png';\nconst styles = {\n  container: {\n    float: 'left',\n    transform: 'translateY(100px)'\n  },\n  bar: {\n    backgroundColor: '#8C52FF',\n    width: '480px'\n  },\n  challenge: {\n    outline: 'none',\n    fontFamily: 'Red Hat Display, sans-serif'\n  },\n  desc: {\n    width: '470px',\n    color: '#f1f1f1',\n    fontFamily: 'Red Hat Display, sans-serif'\n  },\n  media: {\n    height: '400px',\n    width: '400px',\n    marginLeft: '30px'\n  }\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`\n  };\n}\n\nexport default function LessonOne() {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"sm\",\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AppBar, {\n    position: \"static\",\n    style: styles.bar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Tabs, {\n    value: value,\n    onChange: handleChange,\n    TabIndicatorProps: {\n      style: {\n        background: 'white'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Tab, Object.assign({\n    label: \"Variables\"\n  }, a11yProps(0), {\n    style: styles.challenge,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Tab, Object.assign({\n    label: \"Constants\"\n  }, a11yProps(1), {\n    style: styles.challenge,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Tab, Object.assign({\n    label: \"Data types\"\n  }, a11yProps(2), {\n    style: styles.challenge,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  })))), /*#__PURE__*/React.createElement(GridList, {\n    cellHeight: 450,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TabPanel, {\n    value: value,\n    index: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    style: styles.desc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, \"A variable is a little space of memory where you can save data and use it along your program.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 118\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 123\n    }\n  }), \"This is the common way to declare a simple variable:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 77\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 82\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 25\n    }\n  }, \"var number = 1 \"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 47\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 52\n    }\n  }), \"As you can see in the example above, we used the reserved word 'var' (this word may change in others programming languages), followed by the variable name of your choice.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 70\n    }\n  }), \"The name of your variables always need to start with lowercase letters.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 96\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 101\n    }\n  }), \"At the end of the declaration we put an equal sign followed by a number; this means that the data type (the information that our variable will store) will be a number. You'll see another data types later.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 61\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 66\n    }\n  }), /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 25\n    }\n  }, \"Excercise\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 47\n    }\n  }), \"Declare three variables: day, month and year respectively and give them the value of your birthdate. Example:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 134\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 140\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 25\n    }\n  }, \"var day = 2\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 43\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 25\n    }\n  }, \"var month = 10\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 46\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 25\n    }\n  }, \"var year = 1996\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 47\n    }\n  })))), /*#__PURE__*/React.createElement(GridList, {\n    cellHeight: 450,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TabPanel, {\n    value: value,\n    index: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    style: styles.desc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }, \"We declare constants when we know that the information we keep will not be modified throughout the program.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 132\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 137\n    }\n  }), \"The way to declare a constant is pretty similar to declare a variable; we only need to change the reserved word 'var' for 'const' (you'll find that in other programming lenguages you can use the 'let' word instead):\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 110\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 115\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 25\n    }\n  }, \"const pi = 3.141592\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 51\n    }\n  }), \"or \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 28\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 25\n    }\n  }, \"let pi = 3.141592\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 49\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 54\n    }\n  }), /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 25\n    }\n  }, \"Excercise\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 46\n    }\n  }), \"Modify the same variables that you did before and turn them into a constants. Example: \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 112\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 117\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }\n  }, \"const day = 2\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 45\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }\n  }, \"const month = 10\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 48\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 25\n    }\n  }, \"const year = 1996\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 49\n    }\n  })))), /*#__PURE__*/React.createElement(GridList, {\n    cellHeight: 450,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TabPanel, {\n    value: value,\n    index: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    style: styles.desc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  }, \"All right, until now you've only seen the numeric data type, but: \\xBFwhat about the others? Let me show you: \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 132\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 137\n    }\n  })), /*#__PURE__*/React.createElement(CardMedia, {\n    style: styles.media,\n    image: dataTypes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }\n  }))));\n}","map":{"version":3,"sources":["/mnt/c/Users/cmpun/OneDrive/Documentos/alpha-code/src/components/lessons/LessonOne.tsx"],"names":["React","AppBar","CardMedia","Container","GridList","Tab","Tabs","Typography","TabPanel","dataTypes","styles","container","float","transform","bar","backgroundColor","width","challenge","outline","fontFamily","desc","color","media","height","marginLeft","a11yProps","index","id","LessonOne","value","setValue","useState","handleChange","event","newValue","style","background"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { CSSProperties } from 'react'\nimport { AppBar, CardMedia, Container, GridList, Tab, Tabs, Typography} from '@material-ui/core'\nimport TabPanel from '../main-components/TabPanel'\nimport dataTypes from '../../img/data-types.png'\n\n\nexport interface StylesDictionary{\n    [Key: string]: CSSProperties;\n}\n\nconst styles:StylesDictionary = {\n    container: {\n        float: 'left',\n        transform: 'translateY(100px)',\n    },\n    bar: {\n        backgroundColor: '#8C52FF',\n        width: '480px',\n    },\n    challenge: {\n        outline: 'none',\n        fontFamily: 'Red Hat Display, sans-serif',\n    },\n    desc: {\n        width: '470px', \n        color: '#f1f1f1', \n        fontFamily: 'Red Hat Display, sans-serif'\n    },\n    media: {\n        height: '400px',\n        width: '400px',\n        marginLeft: '30px',\n    },\n}\n\n\n\nfunction a11yProps(index: any) {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\n\nexport default function LessonOne() {\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue);\n    };\n\n    return(\n        <Container maxWidth=\"sm\" style={styles.container}>\n\n            <AppBar position=\"static\" style={styles.bar}>\n                <Tabs value={value} onChange={handleChange} TabIndicatorProps={{style: {background:'white'}}}>\n                    <Tab label=\"Variables\" {...a11yProps(0)} style={styles.challenge}/>\n                    <Tab label=\"Constants\" {...a11yProps(1)} style={styles.challenge}/>\n                    <Tab label=\"Data types\" {...a11yProps(2)} style={styles.challenge}/>\n                </Tabs>\n            </AppBar>\n\n            <GridList cellHeight={450}>\n                <TabPanel value={value} index={0}>\n                    <Typography variant=\"body1\" style={styles.desc}>\n                        A variable is a little space of memory where you can save data and use it along your program.<br/><br/>\n                        This is the common way to declare a simple variable:<br/><br/>\n\n                        <i>var number = 1 </i><br/><br/>\n                    \n                        As you can see in the example above, we used the reserved word 'var' (this word may change in others programming languages),\n                        followed by the variable name of your choice.<br/>\n                        The name of your variables always need to start with lowercase letters.<br/><br/>\n\n                        At the end of the declaration we put an equal sign followed by a number; \n                        this means that the data type (the information that our variable will store) will be a number.\n                        You'll see another data types later.<br/><br/>\n\n                        <b>Excercise</b><br /><br />\n                        Declare three variables: day, month and year respectively and give them the value of your birthdate. Example:<br /><br/>\n                        <i>var day = 2</i><br />\n                        <i>var month = 10</i><br />\n                        <i>var year = 1996</i><br />\n                    </Typography>\n                </TabPanel>\n            </GridList>\n\n            <GridList cellHeight={450}>\n                <TabPanel value={value} index={1}>\n                    <Typography variant=\"body1\" style={styles.desc}>\n                        We declare constants when we know that the information we keep will not be modified throughout the program.<br/><br/>\n\n                        The way to declare a constant is pretty similar to declare a variable; we only need to change the reserved word 'var' for 'const' \n                        (you'll find that in other programming lenguages you can use the 'let' word instead):<br/><br/>\n\n                        <i>const pi = 3.141592</i><br/>\n                        or <br/>\n                        <i>let pi = 3.141592</i><br/><br/>\n\n                        <b>Excercise</b><br/><br/>\n                        Modify the same variables that you did before and turn them into a constants. Example: <br/><br/>\n                        <i>const day = 2</i><br />\n                        <i>const month = 10</i><br />\n                        <i>const year = 1996</i><br />\n                    </Typography>\n                </TabPanel>\n            </GridList>\n\n            <GridList cellHeight={450}>\n                <TabPanel value={value} index={2}>\n                    <Typography variant=\"body1\" style={styles.desc}>\n                        All right, until now you've only seen the numeric data type, but: ¿what about the others? Let me show you: <br/><br/>\n                    </Typography>\n                    <CardMedia style={styles.media} image={dataTypes}/>\n                </TabPanel>\n            </GridList>\n\n        </Container>\n    )\n}"]},"metadata":{},"sourceType":"module"}